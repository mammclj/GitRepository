<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<!-- 配置druid数据源 1-->
	<bean name="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbcUrl1}" />
		<property name="username" value="${user1}" />
		<property name="password" value="${password1}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接时最大等待时间，单位毫秒。
			配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁
		
		<property name="maxWait" value="60000" />
		-->
		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<!-- 
			用来检测连接是否有效的sql，要求是一个查询语句。 
			如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会起作用。
		 -->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认true -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，默认false -->
		<property name="testOnReturn" value="false" />
		<!-- 
			建议配置为true，不影响性能，并且保证安全性。 
			申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 
			执行validationQuery检测连接是否有效
		 -->
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>


	<!-- 配置druid数据源 2-->
	<bean name="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbcUrl2}" />
		<property name="username" value="${user2}" />
		<property name="password" value="${password2}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 
		<property name="maxWait" value="60000" />
		-->
		
		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<!-- 编写spring 配置文件的配置多数源映射关系 -->
	<bean class="com.msy.module.common.util.dataSource.DynamicDataSource" id="dataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSource1" key="dataSource1"></entry>
				<entry value-ref="dataSource2" key="dataSource2"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource1"/>
	</bean> 
	<!-- 创建SqlSessionFactory，同时指定数据源 spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/msy/module/common/mapping/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.msy.module.common.dao"
		p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<!-- 切换数据源配置 
	<bean id="dataSourceAspect" class="com.msy.module.common.util.dataSource.DataSourceAspect" />
	<aop:config>
        <aop:aspect id="dynamicAspect" ref="dataSourceAspect" order="-9999">
            <aop:pointcut id="dataSourcePointcut" expression="execution(* com.mmm.service.*.*(..))"/>
            <aop:before  pointcut-ref="dataSourcePointcut" method="intercept" />
        </aop:aspect>
    </aop:config>
	-->

	<!-- ===================================事务的配置================================== -->
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<!-- 注解事务处理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 启用注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="2" />

	<!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="login*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="regist*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	
	<!-- 配置哪些类的方法进行事务管理 -->
    <aop:config>
    	<aop:pointcut id="allManagerMethod" expression="execution (* com.mmm.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>
    </aop:config>
	 
    
    
    <!-- 通知配置:方法日志实现 
    <bean id="loggingAspect" class="com.mmm.utils.logging.LoggingAspect"/>
    -->
</beans>  